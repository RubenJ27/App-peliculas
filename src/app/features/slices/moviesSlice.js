import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
  isFetchingMovieRatings: false,
  isFetchingMovieDetails: false,
  isLoading: true,
  errorFetchingMovieRatings: null,
  successFetchingMovieRatings: null,
  errorFetchingMovieDetails: null,
  successFetchingMovieDetails: null,
  ratingsDetails: {},
  movieDetails: {},
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const moviesSlice = createSlice({
  name: "movies-slice",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    startFetchMovieRatings(state, action) {
      state.isLoading = false;
      state.isFetchingMovieRatings = true;
    },
    successFetchMovieRatings(state, action) {
      state.isLoading = false;
      state.isFetchingMovieRatings = false;
      state.ratingsDetails = action.payload;
      state.successFetchingMovieRatings = true;
      state.errorFetchingMovieRatings = null;
    },
    errorFetchMovieRatings(state, action) {
      state.isLoading = false;
      state.isFetchingMovieRatings = false;
      state.successFetchingMovieRatings = false;
      state.errorFetchingMovieRatings = action.payload.error;
      state.ratingsDetails = {};
    },
    startFetchMovieDetails(state, action) {
      state.isFetchingMovieDetails = true;
    },
    successFetchMovieDetails(state, action) {
      state.movieDetails = action.payload;
      state.isFetchingMovieDetails = false;
      state.successFetchingMovieDetails = true;
      state.errorFetchingMovieDetails = null;
    },
    errorFetchMovieDetails(state, action) {
      state.isFetchingMovieDetails = false;
      state.successFetchingMovieDetails = false;
      state.errorFetchingMovieDetails = action.payload.error;
      state.movieDetails = {};
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});


const { actions, reducer } = moviesSlice;

const {
  startFetchMovieRatings,
  successFetchMovieRatings,
  errorFetchMovieRatings,
  startFetchMovieDetails,
  successFetchMovieDetails,
  errorFetchMovieDetails
} = actions;

export {
  startFetchMovieRatings,
  successFetchMovieRatings,
  errorFetchMovieRatings,
  startFetchMovieDetails,
  successFetchMovieDetails,
  errorFetchMovieDetails
};

export default reducer;
