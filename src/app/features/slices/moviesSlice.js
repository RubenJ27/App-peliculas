import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { useDispatch, useSelector } from "react-redux";
import { BASE_URL } from "../../../api/ApiMovies";
import { BASE_URL_AUTOCOMPLETE } from "../../../api/ApiMovies";
import { Results } from "../../../pages/Results";

const initialState = {
  isLoadingGetObtainMovies: true,
  isFetchingMovieRatings: false,
  isFetchingMovieDetails: false,
  isLoading: true,
  errorFetchingMovieRatings: null,
  successFetchingMovieRatings: null,
  errorFetchingMovieDetails: null,
  successFetchingMovieDetails: null,
  ratingsDetails: {},
  movieDetails: {},
  getMoviesList: {},
  getTitleMovieSearch: "",
};

// First, create the thunk
const fetchMovieRatings = createAsyncThunk(
  'movies-slice/fetchByIdStatus',
  async (movieId) => {
    const ratingsResponse = await BASE_URL.get(
      `title/get-ratings?tconst=${movieId}`,
      {
        headers: {
          "X-RapidAPI-Key": import.meta.env.VITE_APP_API_KEY,
          "X-RapidAPI-Host": import.meta.env.VITE_APP_API_HOST
        },
      }
    )
    return ratingsResponse.data;
  }
);


export const getObtainMovies = createAsyncThunk(
  'movies-slice/getObtainMovies',
  async (moviesState) => {
    try {
      const getMoviesResponse = await BASE_URL_AUTOCOMPLETE.get(`/?q=${moviesState}`, { headers: { "X-RapidAPI-Key": import.meta.env.VITE_APP_API_KEY, "X-RapidAPI-Host": import.meta.env.VITE_APP_API_HOST} });
      return getMoviesResponse.data.d;
    } catch (error) {
      console.log(error);
    }
  }
);

export const moviesSlice = createSlice({
  name: "movies-slice",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setTitleSearch: (state, action) => {
      state.getTitleMovieSearch = action.payload;
    },
    startFetchMovieRatings(state, action) {
      state.isLoading = false;
      state.isFetchingMovieRatings = true;
    },
    successFetchMovieRatings(state, action) {
      state.isLoading = false;
      state.isFetchingMovieRatings = false;
      state.ratingsDetails = action.payload;
      state.successFetchingMovieRatings = true;
      state.errorFetchingMovieRatings = null;
    },
    errorFetchMovieRatings(state, action) {
      state.isLoading = false;
      state.isFetchingMovieRatings = false;
      state.successFetchingMovieRatings = false;
      state.errorFetchingMovieRatings = action.payload.error;
      state.ratingsDetails = {};
    },
    startFetchMovieDetails(state, action) {
      state.isFetchingMovieDetails = true;
    },
    successFetchMovieDetails(state, action) {
      state.movieDetails = action.payload;
      state.isFetchingMovieDetails = false;
      state.successFetchingMovieDetails = true;
      state.errorFetchingMovieDetails = null;
    },
    errorFetchMovieDetails(state, action) {
      state.isFetchingMovieDetails = false;
      state.successFetchingMovieDetails = false;
      state.errorFetchingMovieDetails = action.payload.error;
      state.movieDetails = {};
    },
  },
  extraReducers: (builder) => {
    builder
   /*  addCase(fetchMovieRatings.fulfilled, (state, action) => {
      // Add user to the state array
      state.entities.push(action.payload)
    }), */
    .addCase(getObtainMovies.pending, (state, action) => {
      // Add user to the state array
      /* console.log("pendind") */
      state.isLoadingGetObtainMovies = true;
    })
    .addCase(getObtainMovies.fulfilled, (state, action) => {
      // Add user to the state array
      state.getMoviesList = action.payload;
      state.isLoadingGetObtainMovies = false;
    })
    .addCase(getObtainMovies.rejected, (state, action) => {
      // Add user to the state array
      /* console.log("failed"); */
      state.isLoadingGetObtainMovies = false;
    })
  }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});


const { actions, reducer } = moviesSlice;

export const {
  startFetchMovieRatings,
  successFetchMovieRatings,
  errorFetchMovieRatings,
  startFetchMovieDetails,
  successFetchMovieDetails,
  errorFetchMovieDetails,
  setTitleSearch,
} = actions;


export const isLoadingGetObtainMovies = (state) => state.moviesSlice.isLoadingGetObtainMovies;

export default reducer;
